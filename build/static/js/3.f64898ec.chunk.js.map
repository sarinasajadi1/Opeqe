{"version":3,"sources":["components/UI/Input/Input.module.css","components/UI/Button/Button.module.css","components/UI/Spinner/Spinner.module.css","containers/Auth/Auth.module.css","components/UI/Input/Input.js","components/UI/Button/Button.js","components/UI/Spinner/Spinner.js","containers/Auth/Auth.js"],"names":["module","exports","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","button","disabled","Button","btnType","onClick","clicked","children","spinner","Loader","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.f64898ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1hZ62\",\"Label\":\"Input_Label__B_pI5\",\"InputElement\":\"Input_InputElement__1xgA4\",\"Invalid\":\"Input_Invalid__3OG6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2CRn4\",\"Success\":\"Button_Success__3RGot\",\"Danger\":\"Button_Danger__14WLu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__27CXo\",\"load2\":\"Spinner_load2__3Oo7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__4UNHy\"};","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","import React from 'react'\r\n\r\nimport classes from './Button.module.css'\r\n\r\nconst button = (props) => (\r\n    <button disabled={props.disabled}\r\n     className={[classes.Button, classes[props.btnType]].join(' ')} onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React from 'react';\r\nimport classes from './Spinner.module.css';\r\n\r\nconst spinner = (props) => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n)\r\n\r\nexport default spinner;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if ( !this.props.buildingBurger && this.props.authRedirectPath !== '/' ) {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( this.state.controls, {\r\n            [controlName]: updateObject( this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            } )\r\n        } );\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState( prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        } );\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if ( this.props.error ) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if ( this.props.isAuthenticated ) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"],"sourceRoot":""}