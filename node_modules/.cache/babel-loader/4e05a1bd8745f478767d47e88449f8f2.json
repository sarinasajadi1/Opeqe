{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarin\\\\burger-builder\\\\src\\\\containers\\\\Orders\\\\Orders.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token, this.props.userId);\n  }\n\n  render() {\n    let orders = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", orders, \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["C:/Users/sarin/burger-builder/src/containers/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","componentDidMount","props","onFetchOrders","token","userId","render","orders","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAC3BQ,EAAAA,iBAAiB,GAAI;AACjB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC,EAA2C,KAAKF,KAAL,CAAWG,MAAtD;AACH;;AAEDC,EAAAA,MAAM,GAAI;AACN,QAAIC,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAK,CAAC,KAAKL,KAAL,CAAWM,OAAjB,EAA2B;AACvBD,MAAAA,MAAM,GAAG,KAAKL,KAAL,CAAWK,MAAX,CAAkBE,GAAlB,CAAuBC,KAAK,IACjC,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAT;AAMH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACKN,MADL,mCADJ;AAKH;;AApB0B;;AAuB/B,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHR,IAAAA,MAAM,EAAEQ,KAAK,CAACL,KAAN,CAAYH,MADjB;AAEHC,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF,OAFlB;AAGHJ,IAAAA,KAAK,EAAEW,KAAK,CAACC,IAAN,CAAWZ,KAHf;AAIHC,IAAAA,MAAM,EAAEU,KAAK,CAACC,IAAN,CAAWX;AAJhB,GAAP;AAMH,CAPD;;AASA,MAAMY,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHf,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBa,QAAQ,CAAEpB,OAAO,CAACqB,WAAR,CAAoBf,KAApB,EAA2BC,MAA3B,CAAF;AADvC,GAAP;AAGH,CAJD;;AAMA,eAAeX,OAAO,CAAEoB,eAAF,EAAmBG,kBAAnB,CAAP,CAAgDpB,gBAAgB,CAAEG,MAAF,EAAUJ,KAAV,CAAhE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component {\r\n    componentDidMount () {\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render () {\r\n        let orders = <Spinner />;\r\n        if ( !this.props.loading ) {\r\n            orders = this.props.orders.map( order => (\r\n                <Order\r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price} />\r\n            ) )\r\n        }\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch( actions.fetchOrders(token, userId) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( withErrorHandler( Orders, axios ) );"]},"metadata":{},"sourceType":"module"}