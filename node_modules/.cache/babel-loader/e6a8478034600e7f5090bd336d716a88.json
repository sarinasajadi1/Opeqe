{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarin\\\\burger-builder\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n        touched: true\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier]: updatedFormElement\n      });\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"ORDER\"), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \");\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", form, \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:/Users/sarin/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","Spinner","classes","axios","Input","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,gBAAP,MAA6B,gDAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,yBAA5C;;AAEA,MAAMC,WAAN,SAA0BX,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCY,KADgC,GACxB;AACJC,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAE,OADX;AAEFC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFb;AAMFC,UAAAA,KAAK,EAAE,EANL;AAOFC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPV;AAUFC,UAAAA,KAAK,EAAE,KAVL;AAWFC,UAAAA,OAAO,EAAE;AAXP,SADC;AAcPC,QAAAA,MAAM,EAAE;AACJT,UAAAA,WAAW,EAAE,OADT;AAEJC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFX;AAMJC,UAAAA,KAAK,EAAE,EANH;AAOJC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPR;AAUJC,UAAAA,KAAK,EAAE,KAVH;AAWJC,UAAAA,OAAO,EAAE;AAXL,SAdD;AA2BPE,QAAAA,OAAO,EAAE;AACLV,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE,CAHH;AAIRC,YAAAA,SAAS,EAAE;AAJH,WAPP;AAaLN,UAAAA,KAAK,EAAE,KAbF;AAcLC,UAAAA,OAAO,EAAE;AAdJ,SA3BF;AA2CPM,QAAAA,OAAO,EAAE;AACLd,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPP;AAULC,UAAAA,KAAK,EAAE,KAVF;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SA3CF;AAwDPO,QAAAA,KAAK,EAAE;AACHf,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERU,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHT,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SAxDA;AAsEPS,QAAAA,cAAc,EAAE;AACZjB,UAAAA,WAAW,EAAE,QADD;AAEZC,UAAAA,aAAa,EAAE;AACXiB,YAAAA,OAAO,EAAE,CACL;AAACd,cAAAA,KAAK,EAAE,SAAR;AAAmBe,cAAAA,YAAY,EAAE;AAAjC,aADK,EAEL;AAACf,cAAAA,KAAK,EAAE,UAAR;AAAoBe,cAAAA,YAAY,EAAE;AAAlC,aAFK;AADE,WAFH;AAQZf,UAAAA,KAAK,EAAE,SARK;AASZC,UAAAA,UAAU,EAAE,EATA;AAUZE,UAAAA,KAAK,EAAE;AAVK;AAtET,OADP;AAoFJa,MAAAA,WAAW,EAAE;AApFT,KADwB;;AAAA,SAwFhCC,YAxFgC,GAwFfC,KAAF,IAAa;AACxBA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,qBAAT,IAAkC,KAAK5B,KAAL,CAAWC,SAA7C,EAAwD;AACpD0B,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAkC,KAAK5B,KAAL,CAAWC,SAAX,CAAqB2B,qBAArB,EAA4CrB,KAA9E;AACH;;AACD,YAAMsB,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWC,IADd;AAEVC,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAFR;AAGVC,QAAAA,SAAS,EAAEP,QAHD;AAIVQ,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI;AAJT,OAAd;AAOA,WAAKJ,KAAL,CAAWK,aAAX,CAAyBP,KAAzB,EAAgC,KAAKE,KAAL,CAAWM,KAA3C;AAEH,KAxG+B;;AAAA,SA0GhCC,mBA1GgC,GA0GV,CAACb,KAAD,EAAQc,eAAR,KAA4B;AAE9C,YAAMC,kBAAkB,GAAG3C,YAAY,CAAC,KAAKG,KAAL,CAAWC,SAAX,CAAqBsC,eAArB,CAAD,EAAwC;AAC3EhC,QAAAA,KAAK,EAAEkB,KAAK,CAACgB,MAAN,CAAalC,KADuD;AAE3EG,QAAAA,KAAK,EAAEZ,aAAa,CAAC2B,KAAK,CAACgB,MAAN,CAAalC,KAAd,EAAqB,KAAKP,KAAL,CAAWC,SAAX,CAAqBsC,eAArB,EAAsC/B,UAA3D,CAFuD;AAG3EG,QAAAA,OAAO,EAAE;AAHkE,OAAxC,CAAvC;AAKA,YAAM+B,gBAAgB,GAAG7C,YAAY,CAAC,KAAKG,KAAL,CAAWC,SAAZ,EAAuB;AACxD,SAACsC,eAAD,GAAmBC;AADqC,OAAvB,CAArC;AAIA,UAAIjB,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIgB,eAAT,IAA4BG,gBAA5B,EAA8C;AAC1CnB,QAAAA,WAAW,GAAGmB,gBAAgB,CAACH,eAAD,CAAhB,CAAkC7B,KAAlC,IAA2Ca,WAAzD;AACH;;AACD,WAAKoB,QAAL,CAAc;AAAC1C,QAAAA,SAAS,EAAEyC,gBAAZ;AAA8BnB,QAAAA,WAAW,EAAEA;AAA3C,OAAd;AACH,KA1H+B;AAAA;;AA4HhCqB,EAAAA,MAAM,GAAI;AACN,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAK9C,KAAL,CAAWC,SAA3B,EAAsC;AAClC4C,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWC,SAAX,CAAqB6C,GAArB;AAFW,OAAvB;AAIH;;AACD,QAAII,IAAI,GACJ;AAAM,MAAA,QAAQ,EAAE,KAAK1B,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACKqB,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,IAC9B,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB9C,WAFpC;AAGI,MAAA,aAAa,EAAEiD,WAAW,CAACH,MAAZ,CAAmB7C,aAHtC;AAII,MAAA,KAAK,EAAEgD,WAAW,CAACH,MAAZ,CAAmB1C,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAAC6C,WAAW,CAACH,MAAZ,CAAmBvC,KALjC;AAMI,MAAA,cAAc,EAAE0C,WAAW,CAACH,MAAZ,CAAmBzC,UANvC;AAOI,MAAA,OAAO,EAAE4C,WAAW,CAACH,MAAZ,CAAmBtC,OAPhC;AAQI,MAAA,OAAO,EAAGc,KAAD,IAAW,KAAKa,mBAAL,CAAyBb,KAAzB,EAAgC2B,WAAW,CAACJ,EAA5C,CARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,8CAYI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,QAAQ,EAAE,CAAC,KAAKhD,KAAL,CAAWuB,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAZJ,mCADJ;;AAgBA,QAAK,KAAKQ,KAAL,CAAWsB,OAAhB,EAA0B;AACtBH,MAAAA,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,WACI;AAAK,MAAA,SAAS,EAAE1D,OAAO,CAACO,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,8CAEKmD,IAFL,mCADJ;AAMH;;AA7J+B;;AAgKpC,MAAMI,eAAe,GAAGtD,KAAK,IAAI;AAC7B,SAAO;AACHgC,IAAAA,IAAI,EAAEhC,KAAK,CAACuD,aAAN,CAAoBzB,WADvB;AAEHG,IAAAA,KAAK,EAAEjC,KAAK,CAACuD,aAAN,CAAoBC,UAFxB;AAGHH,IAAAA,OAAO,EAAErD,KAAK,CAAC6B,KAAN,CAAYwB,OAHlB;AAIHhB,IAAAA,KAAK,EAAErC,KAAK,CAACyD,IAAN,CAAWpB,KAJf;AAKHF,IAAAA,MAAM,EAAEnC,KAAK,CAACyD,IAAN,CAAWtB;AALhB,GAAP;AAOH,CARD;;AAUA,MAAMuB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHvB,IAAAA,aAAa,EAAE,CAACF,SAAD,EAAYG,KAAZ,KAAsBsB,QAAQ,CAAC/D,OAAO,CAACgE,cAAR,CAAuB1B,SAAvB,EAAkCG,KAAlC,CAAD;AAD1C,GAAP;AAGH,CAJD;;AAMA,eAAehD,OAAO,CAACiE,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C/D,gBAAgB,CAACI,WAAD,EAAcN,KAAd,CAA7D,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n  \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n        \r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}