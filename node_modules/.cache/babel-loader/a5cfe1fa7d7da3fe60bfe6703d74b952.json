{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\sarin\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{connect}from'react-redux';import{Redirect}from'react-router-dom';import Input from'../../components/UI/Input/Input';import Button from'../../components/UI/Button/Button';import Spinner from'../../components/UI/Spinner/Spinner';import classes from'./Auth.module.css';import*as actions from'../../store/actions/index';import{updateObject,checkValidity}from'../../shared/utility';var Auth=/*#__PURE__*/function(_Component){_inherits(Auth,_Component);function Auth(){var _getPrototypeOf2;var _this;_classCallCheck(this,Auth);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Auth)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={controls:{email:{elementType:'input',elementConfig:{type:'email',placeholder:'Mail Address'},value:'',validation:{required:true,isEmail:true},valid:false,touched:false},password:{elementType:'input',elementConfig:{type:'password',placeholder:'Password'},value:'',validation:{required:true,minLength:6},valid:false,touched:false}},isSignup:true};_this.inputChangedHandler=function(event,controlName){var updatedControls=updateObject(_this.state.controls,_defineProperty({},controlName,updateObject(_this.state.controls[controlName],{value:event.target.value,valid:checkValidity(event.target.value,_this.state.controls[controlName].validation),touched:true})));_this.setState({controls:updatedControls});};_this.submitHandler=function(event){event.preventDefault();_this.props.onAuth(_this.state.controls.email.value,_this.state.controls.password.value,_this.state.isSignup);};_this.switchAuthModeHandler=function(){_this.setState(function(prevState){return{isSignup:!prevState.isSignup};});};return _this;}_createClass(Auth,[{key:\"componentDidMount\",value:function componentDidMount(){if(!this.props.buildingBurger&&this.props.authRedirectPath!=='/'){this.props.onSetAuthRedirectPath();}}},{key:\"render\",value:function render(){var _this2=this;var formElementsArray=[];for(var key in this.state.controls){formElementsArray.push({id:key,config:this.state.controls[key]});}var form=formElementsArray.map(function(formElement){return React.createElement(Input,{key:formElement.id,elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);}});});if(this.props.loading){form=React.createElement(Spinner,null);}var errorMessage=null;if(this.props.error){errorMessage=React.createElement(\"p\",null,this.props.error.message);}var authRedirect=null;if(this.props.isAuthenticated){authRedirect=React.createElement(Redirect,{to:this.props.authRedirectPath});}return React.createElement(\"div\",{className:classes.Auth},\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",authRedirect,\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",errorMessage,\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",React.createElement(\"form\",{onSubmit:this.submitHandler},\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",form,\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",React.createElement(Button,{btnType:\"Success\"},\"SUBMIT\"),\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"),\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \",React.createElement(Button,{clicked:this.switchAuthModeHandler,btnType:\"Danger\"},\"SWITCH TO \",this.state.isSignup?'SIGNIN':'SIGNUP'),\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \");}}]);return Auth;}(Component);var mapStateToProps=function mapStateToProps(state){return{loading:state.auth.loading,error:state.auth.error,isAuthenticated:state.auth.token!==null,buildingBurger:state.burgerBuilder.building,authRedirectPath:state.auth.authRedirectPath};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onAuth:function onAuth(email,password,isSignup){return dispatch(actions.auth(email,password,isSignup));},onSetAuthRedirectPath:function onSetAuthRedirectPath(){return dispatch(actions.setAuthRedirectPath('/'));}};};export default connect(mapStateToProps,mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/sarin/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","classes","actions","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if ( !this.props.buildingBurger && this.props.authRedirectPath !== '/' ) {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( this.state.controls, {\r\n            [controlName]: updateObject( this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            } )\r\n        } );\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState( prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        } );\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if ( this.props.error ) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if ( this.props.isAuthenticated ) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"]},"metadata":{},"sourceType":"module"}